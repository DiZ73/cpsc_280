Talk about Waterfall, Rapid Prototyping, and Spiral
They are three styles of development that are very similar in their structurre, but depends on the best way that one develops software.
There are many ways that Software is valued. This value is based on various software principles.

Principles on which software is valued:
  1. Customer Satisfaction (Priorities) - The customer requirements.
  2. Change - The definition of Insanity is doing the same thing that same time, and expecting different results.
  3. Short time Development - Being efficient time-wise, and getting the software out on time.
  4. Teamwork (Customers/Developers) - Make sure Business people and developers work together.
  5. Developers - Build projects around motivated individuals.
  6. Communication (Customer-Developer Interaction) - Convey information in a Development team through face-toface communication.
  7. Software Progress - Working software is the primary measure of progress.
  8. Consistent Pace - Agile processes promote sustainable development
  9. Good Design of Technical Excellence - Continuous attention to technical excellence.
  10. Work Smarter not Harder - Simplicity - The art of maximizing the ammount of work not done - is essential.
  11. Difference between Teams - best requirments, design, and archetechtures come from self-organizing teams.
  12. Teamwork Self-assesment - The team reflects on how to become more efficient and better developing.
  
  There are several Methodologies that come with Development.
  Traditional Process - A Lengthy development time methodology, in which there are a hand ful of developers that satisfy
  the requirment,
                        and leave assesments to the end.
  One of the forms of Agile Methodologies is extreme programmingk, which looks at Rapid feedback type development,
  takes the simplest possible approach to this.
The incremental changes are not big, they make small changes that add up, building layer after layer of the project until you have a
solution.
After we have done requirements and Analysis, we wind up with user stories, that can be presented on index cards, and short
descriptions.
The developers can make estimates on best case, most likely, and worst case scenarios for the solution based on the user stories.
You collect sotry cards and prioritize them. We also have to identify Classes and Responsibilities in the system.
This plays into the role of Object oriented design for the system.
Remember that classes represent entities, and responsabilities represent actions and functions to implement.
